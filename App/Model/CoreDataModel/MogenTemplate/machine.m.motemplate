

<$foreach Relationship noninheritedRelationships do$>
#import "<$Relationship.destinationEntity.managedObjectClassName$>.h"
<$endforeach do$>

@interface _<$managedObjectClassName$>()
<$foreach Relationship noninheritedRelationships do$><$if Relationship.isToMany$>
@property (nonatomic, strong, readwrite) NSSet *<$Relationship.name$>;

<$endif$><$endforeach do$>
@end

/** \ingroup DataModel */

@implementation _<$managedObjectClassName$>

+ (NSSet *)dictionaryRepresentationKeys
{
    NSMutableSet *set = [NSMutableSet setWithSet:[super dictionaryRepresentationKeys]];
    
    <$foreach Attribute noninheritedAttributes do$><$if Attribute.hasDefinedAttributeType$>
      [set addObject:kModelProperty<$managedObjectClassName$><$Attribute.name.initialCapitalString$>];
    <$endif$><$endforeach do$>
    <$foreach Relationship noninheritedRelationships do$>
    [set addObject:kModelDictionary<$managedObjectClassName$><$Relationship.name.initialCapitalString$>];
    <$endforeach do$>
    
    return [NSSet setWithSet:set];
}

- (id)init
{
    if((self = [super init]))
    {
        <$foreach Attribute noninheritedAttributes do$>
        <$if Attribute.hasDefinedAttributeType && Attribute.hasScalarAttributeType && ! Attribute.isOptional$>
        <$if Attribute.defaultValue$>
        self.<$Attribute.name$> = [NSNumber <$Attribute.scalarFactoryMethodName$><$Attribute.defaultValue$>];
        <$else$>
        self.<$Attribute.name$> = [NSNumber <$Attribute.scalarFactoryMethodName$>0];
        <$endif$><$endif$><$endforeach do$>
    }
    
    return self;
}

- (id) initWithCoder: (NSCoder*) aDecoder
{
    if ([[super class] instancesRespondToSelector: @selector(initWithCoder:)]) {
        self = [super initWithCoder: aDecoder];
    } else {
        self = [super init];
    }
    if (self) {
        <$foreach Attribute noninheritedAttributes do$><$if Attribute.hasDefinedAttributeType$>
        self.<$Attribute.name$> = [aDecoder decodeObjectOfClass:[<$Attribute.objectAttributeClassName$> class] forKey:kModelProperty<$managedObjectClassName$><$Attribute.name.initialCapitalString$>];
        <$endif$><$endforeach do$>
        <$foreach Relationship noninheritedRelationships do$><$if Relationship.isToMany && Relationship.isTransient$>
        {
            NSSet *set = [aDecoder decodeObjectForKey: kModelProperty<$managedObjectClassName$><$Relationship.name.initialCapitalString$>];
            NSMutableSet *nonretainingSet = NonretainingNSMutableSetMake();
            [nonretainingSet unionSet: set];
            self.<$Relationship.name$> = nonretainingSet;
        }
        <$elseif Relationship.isToMany$>
        self.<$Relationship.name$> = [aDecoder decodeObjectOfClasses:[NSSet setWithObjects:[<$Relationship.destinationEntity.managedObjectClassName$> class], [NSSet class], nil] forKey:kModelProperty<$managedObjectClassName$><$Relationship.name.initialCapitalString$>];
        <$else$>
        self.<$Relationship.name$> = [aDecoder decodeObjectOfClass:[<$Relationship.destinationEntity.managedObjectClassName$> class] forKey:kModelProperty<$managedObjectClassName$><$Relationship.name.initialCapitalString$>];
        <$endif$><$endforeach do$>
    }
    return self;
}

- (void) encodeWithCoder: (NSCoder*) aCoder
{
    [super encodeWithCoder: aCoder];
    <$foreach Attribute noninheritedAttributes do$><$if Attribute.hasDefinedAttributeType$>
    [aCoder encodeObject: self.<$Attribute.name$> forKey: kModelProperty<$managedObjectClassName$><$Attribute.name.initialCapitalString$>];
    <$endif$><$endforeach do$><$foreach Relationship noninheritedRelationships do$>
    [aCoder encodeObject: self.<$Relationship.name$> forKey: kModelProperty<$managedObjectClassName$><$Relationship.name.initialCapitalString$>];
    <$endforeach do$>
}

#pragma mark Dictionary representation

- (id)initWithDictionaryRepresentation:(NSDictionary *)dictionary
{
    if((self = [super initWithDictionaryRepresentation:dictionary]))
    {
        <$foreach Attribute noninheritedAttributes do$><$if Attribute.hasDefinedAttributeType$>
        self.<$Attribute.name$> = [dictionary objectForKey:kModelProperty<$managedObjectClassName$><$Attribute.name.initialCapitalString$>];
        <$endif$><$endforeach do$>
        <$foreach Relationship noninheritedRelationships do$><$if ! Relationship.userInfo.destinationEntityIDKeyPath $><$if ! Relationship.isTransient$><$if Relationship.isToMany$>
        for(id objectRepresentationForDict in [dictionary objectForKey:kModelDictionary<$managedObjectClassName$><$Relationship.name.initialCapitalString$>])
        {
<$"            "$><$Relationship.destinationEntity.managedObjectClassName$> *<$Relationship.name$>Obj = [[<$Relationship.destinationEntity.managedObjectClassName$> alloc] initWithDictionaryRepresentation:objectRepresentationForDict];
            [self add<$Relationship.name.initialCapitalString$>Object:<$Relationship.name$>Obj];
        }
        <$else$>
        NSDictionary *<$Relationship.name$>Dict = [dictionary objectForKey:kModelDictionary<$managedObjectClassName$><$Relationship.name.initialCapitalString$>];
        if(<$Relationship.name$>Dict != nil)
        {
<$"            "$><$Relationship.destinationEntity.managedObjectClassName$> *<$Relationship.name$>Obj = [[<$Relationship.destinationEntity.managedObjectClassName$> alloc] initWithDictionaryRepresentation:<$Relationship.name$>Dict];
            self.<$Relationship.name$> = <$Relationship.name$>Obj;
        }
        <$endif$><$endif$><$endif$><$endforeach do$>
    }
    
    return self;
}

- (NSDictionary *)dictionaryRepresentation
{
    NSMutableDictionary *dict = [NSMutableDictionary dictionaryWithDictionary:[super dictionaryRepresentation]];
    <$foreach Attribute noninheritedAttributes do$><$if Attribute.hasDefinedAttributeType$>
    [dict setObjectIfNotNil:self.<$Attribute.name$> forKey:kModelProperty<$managedObjectClassName$><$Attribute.name.initialCapitalString$>];
    <$endif$><$endforeach do$>
    <$foreach Relationship noninheritedRelationships do$><$if Relationship.isToMany$>
    if([self.<$Relationship.name$> count] > 0)
    {
        <$if (! Relationship.isTransient) or (Relationship.userInfo.destinationEntityIDKeyPath) $>
        NSMutableSet *<$Relationship.name$>RepresentationsForDictionary = [NSMutableSet setWithCapacity:[self.<$Relationship.name$> count]];
        for(<$Relationship.destinationEntity.managedObjectClassName$> *obj in self.<$Relationship.name$>)
        {
            <$if Relationship.userInfo.destinationEntityIDKeyPath $>
            [<$Relationship.name$>RepresentationsForDictionary addObject:[obj valueForKeyPath:@"<$Relationship.userInfo.destinationEntityIDKeyPath$>"]];
            <$else$>
            [<$Relationship.name$>RepresentationsForDictionary addObject:[obj dictionaryRepresentation]];
            <$endif$>
        }
        [dict setObjectIfNotNil:<$Relationship.name$>RepresentationsForDictionary forKey:kModelDictionary<$managedObjectClassName$><$Relationship.name.initialCapitalString$>];
        <$endif$>
    }
    <$else$>
    <$if Relationship.userInfo.destinationEntityIDKeyPath $>
    [dict setObjectIfNotNil:[self.<$Relationship.name$> valueForKeyPath:@"<$Relationship.userInfo.destinationEntityIDKeyPath$>"] forKey:kModelDictionary<$managedObjectClassName$><$Relationship.name.initialCapitalString$>];
    <$else$><$if ! Relationship.isTransient $>
    [dict setObjectIfNotNil:[self.<$Relationship.name$> dictionaryRepresentation] forKey:kModelDictionary<$managedObjectClassName$><$Relationship.name.initialCapitalString$>];
    <$endif$>
    <$endif$>
    <$endif$>
    <$endforeach do$>
    return dict;
}

#pragma mark Direct access

<$foreach Relationship noninheritedRelationships do$>
    <$if Relationship.isToMany$><$if ! Relationship.jr_isOrdered$>
- (<$Relationship.mutableCollectionClassName$>*)<$Relationship.name$>Set {
    return (<$Relationship.mutableCollectionClassName$>*)[self mutableSetValueForKey:kModelProperty<$managedObjectClassName$><$Relationship.name.initialCapitalString$>];;
}

    <$endif$><$endif$>
<$endforeach do$>

<$foreach Relationship noninheritedRelationships do$>
    <$if Relationship.isToMany$><$if Relationship.jr_isOrdered$>
- (<$Relationship.mutableCollectionClassName$>*)<$Relationship.name$>Array 
{
    return (<$Relationship.mutableCollectionClassName$>*)[self mutableArrayValueForKey:kModelProperty<$managedObjectClassName$><$Relationship.name.initialCapitalString$>];
}

    <$endif$><$endif$>
<$endforeach do$>

<$foreach Relationship noninheritedRelationships do$><$if Relationship.isToMany$>
- (void)add<$Relationship.name.initialCapitalString$>Object:(<$Relationship.destinationEntity.managedObjectClassName$>*)value_ settingInverse: (BOOL) setInverse
{
    if(self.<$Relationship.name$> == nil)
    {
        <$if Relationship.isTransient$>
        self.<$Relationship.name$> = NonretainingNSMutableSetMake();
        <$else$>
        self.<$Relationship.name$> = [NSMutableSet set];
        <$endif$>
    }

    [(NSMutableSet *)self.<$Relationship.name$> addObject:value_];
    <$if Relationship.inverseRelationship$><$if ! Relationship.inverseRelationship.isToMany$>
    if (setInverse == YES) {
        [value_ set<$Relationship.inverseRelationship.name.initialCapitalString$>: (<$managedObjectClassName$>*)self settingInverse: NO];
    }
    <$endif$><$endif$>
}

- (void)add<$Relationship.name.initialCapitalString$>Object:(<$Relationship.destinationEntity.managedObjectClassName$>*)value_
{
    [self add<$Relationship.name.initialCapitalString$>Object:(<$Relationship.destinationEntity.managedObjectClassName$>*)value_ settingInverse: YES];
}

- (void)removeAll<$Relationship.name.initialCapitalString$>
{
    <$if Relationship.isTransient$>
    self.<$Relationship.name$> = NonretainingNSMutableSetMake();
    <$else$>
    self.<$Relationship.name$> = [NSMutableSet set];
    <$endif$>
}

- (void)remove<$Relationship.name.initialCapitalString$>Object:(<$Relationship.destinationEntity.managedObjectClassName$>*)value_ settingInverse: (BOOL) setInverse
{
    <$if Relationship.inverseRelationship$><$if ! Relationship.inverseRelationship.isToMany$>
    if (setInverse == YES) {
        [value_ set<$Relationship.inverseRelationship.name.initialCapitalString$>: nil settingInverse: NO];
    }
    <$endif$><$endif$>
    if (value_ != nil) {
        [(NSMutableSet *)self.<$Relationship.name$> removeObject:value_];
    }
}

- (void)remove<$Relationship.name.initialCapitalString$>Object:(<$Relationship.destinationEntity.managedObjectClassName$>*)value_
{
    [self remove<$Relationship.name.initialCapitalString$>Object:(<$Relationship.destinationEntity.managedObjectClassName$>*)value_ settingInverse: YES];
}

<$endif$><$endforeach do$>

<$foreach Relationship noninheritedRelationships do$><$if ! Relationship.isToMany$>
- (void) set<$Relationship.name.initialCapitalString$>: (<$Relationship.destinationEntity.managedObjectClassName$>*) <$Relationship.name$>_ settingInverse: (BOOL) setInverse
{
    <$if Relationship.inverseRelationship$><$if Relationship.inverseRelationship.isToMany$>
    if (<$Relationship.name$>_ == nil && setInverse == YES) {
        [_<$Relationship.name$> remove<$Relationship.inverseRelationship.name.initialCapitalString$>Object: (<$managedObjectClassName$>*)self settingInverse: NO];
    }
    <$else$>
    if (<$Relationship.name$>_ == nil && setInverse == YES) {
        [_<$Relationship.name$> set<$Relationship.inverseRelationship.name.initialCapitalString$>: nil settingInverse: NO];
    }
    <$endif$><$endif$>
    <$if Relationship.isTransient$>
<$"    "$>_<$Relationship.name$> = <$Relationship.name$>_;
    <$else$>
    if (_<$Relationship.name$> != <$Relationship.name$>_) {
<$"        "$>_<$Relationship.name$> = <$Relationship.name$>_;
    }
    <$endif$>
    <$if Relationship.inverseRelationship$><$if Relationship.inverseRelationship.isToMany$>
    if (setInverse == YES) {
        [_<$Relationship.name$> add<$Relationship.inverseRelationship.name.initialCapitalString$>Object: (<$managedObjectClassName$>*)self settingInverse: NO];
    }<$else$>
    if (setInverse == YES) {
        [_<$Relationship.name$> set<$Relationship.inverseRelationship.name.initialCapitalString$>: (<$managedObjectClassName$>*)self settingInverse: NO];
    }<$endif$><$endif$>
}

- (void) set<$Relationship.name.initialCapitalString$>: (<$Relationship.destinationEntity.managedObjectClassName$>*) <$Relationship.name$>_
{
    [self set<$Relationship.name.initialCapitalString$>: <$Relationship.name$>_ settingInverse: YES];
}

<$endif$><$endforeach do$>

//scalar setter and getter support
<$foreach Attribute noninheritedAttributes do$>
<$if Attribute.hasDefinedAttributeType$>
<$if Attribute.hasScalarAttributeType$>
- (<$Attribute.scalarAttributeType$>)<$Attribute.name$>Value {
    NSNumber *result = [self <$Attribute.name$>];
    return [result <$Attribute.scalarAccessorMethodName$>];
}

- (void)set<$Attribute.name.initialCapitalString$>Value:(<$Attribute.scalarAttributeType$>)value_ {
    [self set<$Attribute.name.initialCapitalString$>:[NSNumber <$Attribute.scalarFactoryMethodName$>value_]];
}
<$endif$>
<$endif$>
<$endforeach do$>

#pragma mark Synthesizes

<$foreach Attribute noninheritedAttributes do$>
@synthesize <$Attribute.name$>;
<$endforeach do$>
<$foreach Relationship noninheritedRelationships do$><$if Relationship.isToMany$>
@synthesize <$Relationship.name$>;
<$endif$><$endforeach do$>

+ (BOOL)supportsSecureCoding
{
    return YES;
}

@end
