import Foundation

class _<$managedObjectClassName$> {

	<$checkNonTransientRelationshipCycles $>

	<$foreach Attribute noninheritedAttributes do$>
		<$if Attribute.hasDefinedAttributeType$>
			let kModelProperty<$managedObjectClassName$><$Attribute.name.initialCapitalString$> = "<$Attribute.name$>"
		<$endif$>
	<$endforeach do$>

	<$foreach Relationship noninheritedRelationships do$>
		let kModelProperty<$managedObjectClassName$><$Relationship.name.initialCapitalString$> = "<$Relationship.name$>"
	<$endforeach do$>
	
	<$foreach Relationship noninheritedRelationships do$>
		<$if Relationship.isToMany$>
			var <$Relationship.name$>: NSMutableSet = NSMutableSet()
		<$else$>
			<$if Relationship.isTransient $>
				weak var <$Relationship.name$>: <$Relationship.destinationEntity.managedObjectClassName$>?
			<$else$>
				<$if Relationship.isOptional $>
					var <$Relationship.name$>: <$Relationship.destinationEntity.managedObjectClassName$>?;
				<$else$>
					var <$Relationship.name$>: <$Relationship.destinationEntity.managedObjectClassName$>;
				<$endif$>
			<$endif$>
		<$endif$>
	<$endforeach do$>

	<$foreach Attribute noninheritedAttributes do$>
		<$if Attribute.hasDefinedAttributeType$>
			var <$Attribute.name$>: <$Attribute.objectAttributeType$>
		<$endif$>
	<$endforeach do$>

	<$foreach Relationship noninheritedRelationships do$>
		<$if Relationship.isToMany$>
			func add<$Relationship.name.initialCapitalString$>Object(value_: <$Relationship.destinationEntity.managedObjectClassName$>, setInverse: Bool) {
				self.<$Relationship.name$>.addObject(value_)
				<$if Relationship.inverseRelationship$>
					<$if ! Relationship.inverseRelationship.isToMany$>
						if setInverse {
					        value_.set<$Relationship.inverseRelationship.name.initialCapitalString$>(self as? <$managedObjectClassName$>, setInverse:false);
					    }
				    <$endif$>
				<$endif$>
			}


			func add<$Relationship.name.initialCapitalString$>Object(value_: <$Relationship.destinationEntity.managedObjectClassName$>) {
				self.add<$Relationship.name.initialCapitalString$>Object(value_, setInverse: true)
			}

			func removeAll<$Relationship.name.initialCapitalString$>() {
				self.<$Relationship.name$> = NSMutableSet();
			}

			func remove<$Relationship.name.initialCapitalString$>Object(value_: <$Relationship.destinationEntity.managedObjectClassName$>, setInverse: Bool) {
				<$if Relationship.inverseRelationship$>
					<$if ! Relationship.inverseRelationship.isToMany$>
					    if setInverse {
					        value_.set<$Relationship.inverseRelationship.name.initialCapitalString$>(nil, setInverse:false);
					    }
					<$endif$>
				<$endif$>
			    if value_ != nil {
			        self.<$Relationship.name$>.removeObject(value_)
			    }
			}


			func remove<$Relationship.name.initialCapitalString$>Object(value_: <$Relationship.destinationEntity.managedObjectClassName$>) {
				self.remove<$Relationship.name.initialCapitalString$>Object(value_, setInverse:true)
			}
		<$else$>
			func set<$Relationship.name.initialCapitalString$>(<$Relationship.name$>_: <$Relationship.destinationEntity.managedObjectClassName$>?, setInverse: Bool) {
	    		<$if Relationship.inverseRelationship$>
	    			<$if Relationship.inverseRelationship.isToMany$>
	    				if <$Relationship.name$>_ == nil && setInverse {
	        				<$Relationship.name$>.remove<$Relationship.inverseRelationship.name.initialCapitalString$>Object(self as? <$managedObjectClassName$>, setInverse: false);
	    				}
	   				<$else$>
	   					<$if Relationship.isTransient || Relationship.isOptional$>
		    				if <$Relationship.name$>_ == nil && setInverse {
		        				self.<$Relationship.name$>?.set<$Relationship.inverseRelationship.name.initialCapitalString$>(nil, setInverse: false)
		    				}
		    			<$else$>
		    				if <$Relationship.name$>_ == nil && setInverse {
		        				self.<$Relationship.name$>.set<$Relationship.inverseRelationship.name.initialCapitalString$>(nil, setInverse: false)
		    				}
		    			<$endif$>
	    			<$endif$>
	    		<$endif$>

		    	<$if Relationship.isTransient$>
					<$"    "$>self.<$Relationship.name$> = <$Relationship.name$>_
		    	<$else$>
		    		if !self.<$Relationship.name$> == <$Relationship.name$>_ {
						<$"        "$>self.<$Relationship.name$> = <$Relationship.name$>_
		    		}
		   	 	<$endif$>

		    	<$if Relationship.inverseRelationship$>
		    		<$if Relationship.inverseRelationship.isToMany$>
		    			if setInverse {
		        			self.<$Relationship.name$>.add<$Relationship.inverseRelationship.name.initialCapitalString$>Object(self as? <$managedObjectClassName$>, setInverse: false)
		    			}
		    		<$else$>
		    			<$if Relationship.isTransient || Relationship.isOptional$>
			    			if setInverse {
			        			self.<$Relationship.name$>?.set<$Relationship.inverseRelationship.name.initialCapitalString$>(self as? <$managedObjectClassName$> , setInverse: false)
			    			}
		    			<$else$>
			    			if setInverse {
			        			self.<$Relationship.name$>.set<$Relationship.inverseRelationship.name.initialCapitalString$>(self as? <$managedObjectClassName$>, setInverse: false)
			    			}
		    			<$endif$>
		    		<$endif$>
		    	<$endif$>
			}

			func set<$Relationship.name.initialCapitalString$>(<$Relationship.name$>_: <$Relationship.destinationEntity.managedObjectClassName$>) {
			    self.set<$Relationship.name.initialCapitalString$>(<$Relationship.name$>_, setInverse: true)
			}

		<$endif$>
	<$endforeach do$>
}
