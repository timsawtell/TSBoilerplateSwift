import Foundation

// Dont edit this class! Make your changes in the Human version of this class
// This may be formatted like arse but I prefer an easy to read machine.motemplate file over an easy to read class file that is never edited
// If you want to alter the model, open the Model.xcdatamodeld file and make your changes. Change the project's scheme to "Build Data Model". Build the app. Switch back to the TSBoilerplateSwift scheme to see the results

class _<$managedObjectClassName$>: NSObject, NSSecureCoding {

	<$checkNonTransientRelationshipCycles $>

	<$foreach Attribute noninheritedAttributes do$>
		<$if Attribute.hasDefinedAttributeType$>
			let kModelProperty<$managedObjectClassName$><$Attribute.name.initialCapitalString$> = "<$Attribute.name$>"
		<$endif$>
	<$endforeach do$>

	<$foreach Relationship noninheritedRelationships do$>
		let kModelProperty<$managedObjectClassName$><$Relationship.name.initialCapitalString$> = "<$Relationship.name$>"
	<$endforeach do$>
	
	<$foreach Relationship noninheritedRelationships do$>
		<$if Relationship.isToMany$>
			var <$Relationship.name$> = [_<$Relationship.destinationEntity.managedObjectClassName$>]() 
		<$else$>
			<$if Relationship.isTransient $>
			  private weak var _<$Relationship.name$>: _<$Relationship.destinationEntity.managedObjectClassName$>?
				weak var <$Relationship.name$>: _<$Relationship.destinationEntity.managedObjectClassName$>? {
					set(value) {
						_<$Relationship.name$> = value
					}
					get {
						return _<$Relationship.name$>
					}
				}
			<$else$>
				<$if Relationship.isOptional $>
			    private var _<$Relationship.name$>: _<$Relationship.destinationEntity.managedObjectClassName$>?
					var <$Relationship.name$>: _<$Relationship.destinationEntity.managedObjectClassName$>? {
					set(value) {
						_<$Relationship.name$> = value
					}
					get {
						return _<$Relationship.name$>
					}
				}
				<$else$>
					var <$Relationship.name$> = _<$Relationship.destinationEntity.managedObjectClassName$>() 
				<$endif$>
			<$endif$>
		<$endif$>
	<$endforeach do$>

	<$foreach Attribute noninheritedAttributes do$>
		<$if Attribute.hasDefinedAttributeType$>
			<$if Attribute.isTransient || Attribute.isOptional$>
				var <$Attribute.name$>: <$Attribute.objectAttributeType$>? //optional or transient
			<$else$>
				var <$Attribute.name$> = <$Attribute.objectAttributeType$>() // vanilla Foundation type
			<$endif$>
		<$endif$>
	<$endforeach do$>

	override init() {
    }

	<$foreach Relationship noninheritedRelationships do$>
		<$if Relationship.isToMany$>
			func add<$Relationship.name.initialCapitalString$>Object(value_: _<$Relationship.destinationEntity.managedObjectClassName$>, setInverse: Bool) {
				<$Relationship.name$>.append(value_)
				<$if Relationship.inverseRelationship$>
					<$if ! Relationship.inverseRelationship.isToMany$>
						if setInverse {
					        value_.set<$Relationship.inverseRelationship.name.initialCapitalString$>(self, setInverse:false)
					    }
				    <$endif$>
				<$endif$>
			}

			func add<$Relationship.name.initialCapitalString$>Object(value_: _<$Relationship.destinationEntity.managedObjectClassName$>) {
				add<$Relationship.name.initialCapitalString$>Object(value_, setInverse: true)
			}

			func removeAll<$Relationship.name.initialCapitalString$>() {
				<$Relationship.name$> = [_<$Relationship.destinationEntity.managedObjectClassName$>]()
			}

			func remove<$Relationship.name.initialCapitalString$>Object(value_: _<$Relationship.destinationEntity.managedObjectClassName$>, setInverse: Bool) {
				<$if Relationship.inverseRelationship$>
					<$if ! Relationship.inverseRelationship.isToMany && ! Relationship.isTransient && ! Relationship.isOptional $>
					    if setInverse {
					        value_.set<$Relationship.inverseRelationship.name.initialCapitalString$>(nil, setInverse:false)
					    }
					<$endif$>
				<$endif$>
			    if let index = <$Relationship.name$>.indexOf(value_) {
			       	<$Relationship.name$>.removeAtIndex(index)
			    }
			    
			}

			func remove<$Relationship.name.initialCapitalString$>Object(value_: _<$Relationship.destinationEntity.managedObjectClassName$>) {
				remove<$Relationship.name.initialCapitalString$>Object(value_, setInverse:true)
			}
		<$else$>
			<$if Relationship.isTransient || Relationship.isOptional$>
				func set<$Relationship.name.initialCapitalString$>(<$Relationship.name$>_: _<$Relationship.destinationEntity.managedObjectClassName$>?, setInverse: Bool) {
			<$else$>
				func set<$Relationship.name.initialCapitalString$>(<$Relationship.name$>_: _<$Relationship.destinationEntity.managedObjectClassName$>, setInverse: Bool) {
			<$endif$>
	    		<$if Relationship.inverseRelationship$>
	    			<$if Relationship.inverseRelationship.isToMany$>
	    				<$if Relationship.isTransient || Relationship.isOptional$>
		    				if <$Relationship.name$>_ == nil && setInverse {
		        				<$Relationship.name$>?.remove<$Relationship.inverseRelationship.name.initialCapitalString$>Object(self, setInverse: false)
		    				}
	    				<$endif$>
	   				<$else$>
	   					<$if Relationship.isTransient || Relationship.isOptional$>
		    				if <$Relationship.name$>_ == nil && setInverse {
		        				<$Relationship.name$>?.set<$Relationship.inverseRelationship.name.initialCapitalString$>(nil, setInverse: false)
		    				}
		    			<$endif$>
	    			<$endif$>
	    		<$endif$>

		    	<$Relationship.name$> = <$Relationship.name$>_

		    	<$if Relationship.inverseRelationship$>
		    		<$if Relationship.inverseRelationship.isToMany$>
		    			<$if Relationship.isTransient || Relationship.isOptional$>
			    			if setInverse {
			        			<$Relationship.name$>?.add<$Relationship.inverseRelationship.name.initialCapitalString$>Object(self, setInverse: false)
			    			}
		    			<$else$>
		    				if setInverse {
			        			<$Relationship.name$>.add<$Relationship.inverseRelationship.name.initialCapitalString$>Object(self, setInverse: false) 
			    			}
		    			<$endif$>
		    		<$else$>
		    			<$if Relationship.isTransient || Relationship.isOptional$>
			    			if setInverse {
			        			<$Relationship.name$>?.set<$Relationship.inverseRelationship.name.initialCapitalString$>(self, setInverse: false) 
			    			}
		    			<$else$>
			    			if setInverse {
			        			<$Relationship.name$>.set<$Relationship.inverseRelationship.name.initialCapitalString$>(self, setInverse: false)
			    			}
		    			<$endif$>
		    		<$endif$>
		    	<$endif$>
			}
			<$endif$>

		<$endif$>
	<$endforeach do$>

    class func supportsSecureCoding() -> Bool {
        return true
    }

    func encodeWithCoder(aCoder: NSCoder) {
		<$foreach Attribute noninheritedAttributes do$>
			<$if Attribute.hasDefinedAttributeType$>
				<$if Attribute.isTransient || Attribute.isOptional$>
					if let tmp<$Attribute.name$> = <$Attribute.name$> {
						aCoder.encodeObject(tmp<$Attribute.name$>, forKey:kModelProperty<$managedObjectClassName$><$Attribute.name.initialCapitalString$>)
					}
				<$else$>
	    			aCoder.encodeObject(<$Attribute.name$>, forKey:kModelProperty<$managedObjectClassName$><$Attribute.name.initialCapitalString$>)
	    		<$endif$>
	    	<$endif$>
	    <$endforeach do$>
	    <$foreach Relationship noninheritedRelationships do$>
	    	<$ if Relationship.isToMany $>
	    		aCoder.encodeObject(<$Relationship.name$>, forKey:kModelProperty<$managedObjectClassName$><$Relationship.name.initialCapitalString$>) //1
	    	<$else$>
	    		<$ if Relationship.isTransient || Relationship.isOptional $>
	    			if let real<$Relationship.name$> = <$Relationship.name$> {
	    				aCoder.encodeObject(real<$Relationship.name$>, forKey:kModelProperty<$managedObjectClassName$><$Relationship.name.initialCapitalString$>) //2
	    			}
	    		<$ else $>
	    			aCoder.encodeObject(<$Relationship.name$>, forKey:kModelProperty<$managedObjectClassName$><$Relationship.name.initialCapitalString$>) //3
	    		<$ endif $>
	    	<$ endif $>
	    <$endforeach do$>	
    }

    required init(coder aDecoder: NSCoder) {
    	super.init()
    	<$foreach Attribute noninheritedAttributes do$>
			<$if Attribute.hasDefinedAttributeType$>
	    			<$if Attribute.isTransient || Attribute.isOptional$>
	    				<$Attribute.name$> = aDecoder.decodeObjectOfClass(<$Attribute.objectAttributeType$>.self, forKey:kModelProperty<$managedObjectClassName$><$Attribute.name.initialCapitalString$>) as? <$Attribute.objectAttributeType$> // transient or optional
	    			<$else$>
						<$Attribute.name$> = aDecoder.decodeObjectOfClass(<$Attribute.objectAttributeType$>.self, forKey:kModelProperty<$managedObjectClassName$><$Attribute.name.initialCapitalString$>) as! <$Attribute.objectAttributeType$> // vanilla Foundation type
	    			<$endif$>
	    	<$endif$> 
	    <$endforeach do$>
		<$foreach Relationship noninheritedRelationships do$>
	        <$if Relationship.isToMany$>
	        	<$Relationship.name$> = aDecoder.decodeObjectOfClasses(NSSet(objects:NSArray.self, _<$Relationship.destinationEntity.managedObjectClassName$>.self) as Set<NSObject>, forKey:kModelProperty<$managedObjectClassName$><$Relationship.name.initialCapitalString$>) as! [_<$Relationship.destinationEntity.managedObjectClassName$>] // to many
	        <$else$>
	        	<$if Relationship.isTransient || Relationship.isOptional$>
	        		<$Relationship.name$> = aDecoder.decodeObjectOfClass(_<$Relationship.destinationEntity.managedObjectClassName$>.self, forKey:kModelProperty<$managedObjectClassName$><$Relationship.name.initialCapitalString$>) as? _<$Relationship.destinationEntity.managedObjectClassName$> // transient or optional
	        	<$else$>
	        		<$Relationship.name$> = aDecoder.decodeObjectOfClass(_<$Relationship.destinationEntity.managedObjectClassName$>.self, forKey:kModelProperty<$managedObjectClassName$><$Relationship.name.initialCapitalString$>) as! _<$Relationship.destinationEntity.managedObjectClassName$> // !transient && !optional relationship
	        	<$endif$>
	        <$endif$>
	    <$endforeach do$>
    }
}
